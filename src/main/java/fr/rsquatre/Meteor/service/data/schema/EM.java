/**
 *
 */
package fr.rsquatre.Meteor.service.data.schema;

import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.TYPE;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.util.Map;

/**
 * @author <a href="https://github.com/rsquatre">rsquatre</a>
 *
 *         Â© All rights reserved, unless specified otherwise
 *
 */
public abstract class EM {

	/**
	 *
	 * @deprecated Unused
	 *
	 */
	@Deprecated
	@Retention(RUNTIME)
	@Target(FIELD)
	public static @interface Alias {

	}

	/**
	 *
	 * Indicates a persistent field that stores a simple collection<br>
	 * For {@link Map}s, use {@link MapField} instead<br>
	 * Does <b>not</b> replace {@link Field}
	 *
	 */
	@Retention(RUNTIME)
	@Target(FIELD)
	public @interface CollectionField {

		Class<?> type();
	}

	/**
	 *
	 * Indicates a persistent field
	 *
	 */
	@Retention(RUNTIME)
	@Target(FIELD)
	public @interface Field {

		String name();
	}

	/**
	 *
	 * Indicates an auto-incremented id field<br>
	 * Replaces {@link Field} and will always be called "id" in the schema
	 *
	 */
	@Retention(RUNTIME)
	@Target(FIELD)
	public static @interface Id {

		boolean autoGenerated() default true;
	}

	/**
	 *
	 * Indicates a persistent field that stores a {@link Map}<br>
	 * Does <b>not</b> replace {@link Field}
	 *
	 */
	@Retention(RUNTIME)
	@Target(FIELD)
	public @interface MapField {

		Class<?> keyType();

		Class<?> valueType();
	}

	/**
	 *
	 * Indicates that a class contains an entity
	 *
	 */
	@Retention(RUNTIME)
	@Target(TYPE)
	public static @interface Schema {

		String name();
	}

}
